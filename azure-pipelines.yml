trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    # Download and unzip Terraform
    wget https://releases.hashicorp.com/terraform/0.12.24/terraform_0.12.24_linux_amd64.zip
    unzip terraform_0.12.24_linux_amd64.zip
    # Move Terraform to a folder which is in $PATH
    sudo mv terraform /usr/local/bin/
  displayName: Install Terraform

- script: |
    # Download and unzip tflint
    curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" -o tflint.zip
    unzip tflint.zip
    # Move tflint to a folder which is in $PATH
    sudo mv tflint /usr/local/bin/
    rm tflint.zip
  displayName: Install tflint

- script: terraform init -input=false -backend=false
  displayName: 'Terraform init'

- script: terraform validate
  displayName: 'Validate terraform'

- script: cd tests && terraform init -input=false -backend=false
  displayName: 'Terraform init tests'

- script: cd tests && terraform init -input=false -backend=false
  displayName: 'Validate tests'

- script: cd examples/simple && terraform init -input=false -backend=false
  displayName: 'Terraform init tests'

- script: cd examples/simple && terraform validate
  displayName: 'Validate examples'

- script: if [[ -n "$(terraform fmt -write=false)" ]]; then echo "Some terraform files need be formatted, run 'terraform fmt' to fix"; exit 1; fi
  displayName: 'Check if Terraform configurations are properly formatted'

- script: tflint
  displayName: 'Check Terraform configurations with tflint'